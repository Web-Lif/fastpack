import React, { Suspense } from "react";
import ReactDOM from 'react-dom'
import {
    BrowserRouter as Router,
    Switch,
    Route,
} from 'react-router-dom'

{{#if layout}}
import Layout from '..{{layout}}'
{{/if}}


{{#if loading}}
import RouterLoading from '..{{loading}}'
{{/if}}


{{#each routers}}
const Route{{this.name}} = React.lazy(() => import('../pages{{this.component}}'));
{{/each}}


export const routers = [
    {{#each routers}}
    {
        path: '{{this.path}}',
        component: React.lazy(() => import('../pages{{this.component}}'))
    },
    {{/each}}
] as any

(window as any).g_routers = routers



{{#if notFound}}
const NotFound = React.lazy(() => import('..{{notFound}}'))
{{/if}}
interface BootstrapProps {
    routers?: {
        path: string
        component: any
    }[]
}

function Bootstrap ({
    routers = []
}: BootstrapProps) {
    return (
        <Router
            basename="{{basename}}"
        >
            <Switch>
                {{#eachRouters routers}}
                <Route
                    path="{{this.path}}"
                    exact
                    sensitive
                    render={(props: any) => {
                        {{#if ../layout}}
                        const layout = (
                            <Layout {...props}>
                                {{#if ../loading}}
                                <Suspense fallback={<RouterLoading />}>
                                {{else}}
                                <Suspense fallback={<div />}>
                                {{/if}}
                                    <Route{{this.name}} {...props} />
                                </Suspense>
                            </Layout>
                        )
                        return layout
                        {{else}}
                        const router = (
                            {{#if ../loading}}
                            <Suspense fallback={<RouterLoading />}>
                            {{else}}
                            <Suspense fallback={<div />}>
                            {{/if}}
                                <Route{{this.name}} {...props} />
                            </Suspense>
                        )
                        return router
                        {{/if}}
                    }}
                />
                {{/eachRouters}}
                {routers.map(router => (
                    <Route
                        path={router.path}
                        exact
                        sensitive
                        key={router.path}
                        render={(props: any) => {
                            const RouterComponent = router.component
                            {{#if layout}}
                            const layout = (
                                <Layout {...props}>
                                    {{#if loading}}
                                    <Suspense fallback={<RouterLoading />}>
                                    {{else}}
                                    <Suspense fallback={<div />}>
                                    {{/if}}
                                        <RouterComponent {...props} />
                                    </Suspense>
                                </Layout>
                            )
                            return layout
                            {{else}}
                            const router = (
                                {{#if ../loading}}
                                <Suspense fallback={<RouterLoading />}>
                                {{else}}
                                <Suspense fallback={<div />}>
                                {{/if}}
                                    <RouterComponent {...props} />
                                </Suspense>
                            )
                            return router
                            {{/if}}
                        }}
                    />
                ))}
                <Route
                    path="*"
                    render={(props: any) => {
                        {{#if notFound}}
                        const RouterNotFund = <NotFound {...props}/>
                        {{else}}
                        const RouterNotFund = <div />
                        {{/if}}
                        {{#if layout}}
                        const layout = (
                            <Layout {...props}>
                                {{#if ../loading}}
                                <Suspense fallback={<RouterLoading />}>
                                {{else}}
                                <Suspense fallback={<div />}>
                                {{/if}}
                                    {RouterNotFund}
                                </Suspense>
                            </Layout>
                        )
                        return layout
                        {{else}}
                        return RouterNotFund
                        {{/if}}
                    }}
                />
            </Switch>
        </Router>
    )
}

export default Bootstrap


{{#if rootRender}}
ReactDOM.render(
    <Bootstrap />
    ,
    document.querySelector('#{{rootRender}}')
)
{{else}}
if (document.querySelector('#root')) {
    ReactDOM.render(
        <Bootstrap />
        ,
        root
    )
} else {
    const root = document.createElement("div")
    root.setAttribute('id', 'root')
    root.style.width = '100%'
    root.style.height = '100%'
    document.body.appendChild(root)
    ReactDOM.render(
        <Bootstrap />
        ,
        root
    )
}
{{/if}}