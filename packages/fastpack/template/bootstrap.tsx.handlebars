import React, { Suspense } from "react";
import ReactDOM from 'react-dom'
import {
    BrowserRouter as Router,
    Switch,
    Route,
} from 'react-router-dom'



{{#if vues}}
import Vue from 'vue'

const VueWrapper = ({
    component,
    ...restProps
}: any) => {
    const ref = React.useRef<HTMLDivElement>(null)
    React.useLayoutEffect(() => {
        new Vue({
            render: render => render(component),
            props: restProps
        }).$mount(ref.current);
    }, [])

    return <div ref={ref}/>
}
{{/if}}

{{#if layout}}
import Layout from '..{{layout}}'
{{/if}}
{{#if loading}}
import RouterLoading from '..{{loading}}'
{{/if}}
{{#each links}}
let link{{this.name}};
try {
    link{{this.name}} = require('fastpack_link_{{this.name}}/share')
}catch(e){
    console.error('micro: 加载 {{this.link}} 失败, 请检查是否可以正常访问')
}
{{/each}}


{{#each routers}}
const Route{{this.name}} = React.lazy(() => import('../pages{{this.component}}'));
{{/each}}


export const routers = [
    {{#each routers}}
    {
        path: '{{this.path}}',
        component: React.lazy(() => import('../pages{{this.component}}'))
    },
    {{/each}}
] as any


const shareRouters = [] as any

{{#each vues}}
shareRouters.push({
    path: '{{this.path}}'.replace('.', '-'),
    component: React.lazy(
        async () => {
            const component = await import('../pages{{this.component}}')
            return ({
                default: (props: any) => (
                    <VueWrapper component={component.default} {...props} />
                )
            })
        }
    )
})
{{/each}}

{{#each links}}
if (link{{this.name}}) {
    shareRouters.push(...link{{this.name}}.routers)
}
{{/each}}

{{#if frame}}
routers.push(...shareRouters)
{{/if}}


{{#if notFound}}
const NotFound = React.lazy(() => import('..{{notFound}}'))
{{/if}}
interface BootstrapProps {
    routers?: {
        path: string
        component: any
    }[]
}

function Bootstrap ({
    routers = []
}: BootstrapProps) {
    return (
        <Router
            basename="{{basename}}"
        >
            <Switch>
                {{#eachRouters routers}}
                <Route
                    path="{{this.path}}"
                    exact
                    sensitive
                    render={(props: any) => {
                        {{#if ../layout}}
                        const layout = (
                            <Layout {...props}>
                                {{#if ../loading}}
                                <Suspense fallback={<RouterLoading />}>
                                {{else}}
                                <Suspense fallback={<div />}>
                                {{/if}}
                                    <Route{{this.name}} {...props} />
                                </Suspense>
                            </Layout>
                        )
                        return layout
                        {{else}}
                        const router = (
                            {{#if ../loading}}
                            <Suspense fallback={<RouterLoading />}>
                            {{else}}
                            <Suspense fallback={<div />}>
                            {{/if}}
                                <Route{{this.name}} {...props} />
                            </Suspense>
                        )
                        return router
                        {{/if}}
                    }}
                />
                {{/eachRouters}}
                {routers.map(rt => (
                    <Route
                        path={rt.path}
                        exact
                        sensitive
                        key={rt.path}
                        render={(props: any) => {
                            const RouterComponent = rt.component
                            {{#if layout}}
                            const layout = (
                                <Layout {...props}>
                                    {{#if loading}}
                                    <Suspense fallback={<RouterLoading />}>
                                    {{else}}
                                    <Suspense fallback={<div />}>
                                    {{/if}}
                                        <RouterComponent {...props} />
                                    </Suspense>
                                </Layout>
                            )
                            return layout
                            {{else}}
                            const comp = (
                                {{#if ../loading}}
                                <Suspense fallback={<RouterLoading />}>
                                {{else}}
                                <Suspense fallback={<div />}>
                                {{/if}}
                                    <RouterComponent {...props} />
                                </Suspense>
                            )
                            return comp
                            {{/if}}
                        }}
                    />
                ))}
                <Route
                    path="*"
                    render={(props: any) => {
                        {{#if notFound}}
                        const RouterNotFund = <NotFound {...props}/>
                        {{else}}
                        const RouterNotFund = <div />
                        {{/if}}
                        {{#if layout}}
                        const layout = (
                            <Layout {...props}>
                                {{#if ../loading}}
                                <Suspense fallback={<RouterLoading />}>
                                {{else}}
                                <Suspense fallback={<div />}>
                                {{/if}}
                                    {RouterNotFund}
                                </Suspense>
                            </Layout>
                        )
                        return layout
                        {{else}}
                        return RouterNotFund
                        {{/if}}
                    }}
                />
            </Switch>
        </Router>
    )
}

export default Bootstrap
export { shareRouters as bootstrapRouters} 

