import React, { Suspense } from "react";
import {
    {{ router.type }} as Router,
    Routes,
    Route,
    Outlet
} from 'react-router-dom'

{{#if router.paths.vue}}
import Vue from 'vue'

const VueWrapper = ({
    component,
    ...restProps
}: any) => {
    const ref = React.useRef<HTMLDivElement>(null)
    React.useLayoutEffect(() => {
        new Vue({
            render: render => render(component),
            props: restProps
        }).$mount(ref.current);
    }, [])

    return <div ref={ref}/>
}
{{/if}}

{{#if router.layout}}
import Layout from '..{{router.layout}}'
{{/if}}
{{#if router.loading}}
import RouterLoading from '..{{router.loading}}'
{{/if}}
{{#each links}}
let link{{this.name}};
try {
    link{{this.name}} = require('fastpack_link_{{this.name}}/share')
}catch(e){
    console.error('micro: 加载 {{this.link}} 失败, 请检查是否可以正常访问')
}
{{/each}}

{{#each router.paths.react}}
const Route{{this.name}} = React.lazy(() => import(/* webpackPrefetch: true */'../pages{{this.component}}'));
{{/each}}

export const routers = [
    {{#each router.paths.react}}
    {
        path: '{{this.path}}',
        component: Route{{this.name}}
    },
    {{/each}}
] as any

const shareRouters = [] as any

{{#each router.paths.vue}}
shareRouters.push({
    path: '{{this.path}}'.replace('.', '-'),
    component: React.lazy(
        async () => {
            const component = await import('../pages{{this.component}}')
            return ({
                default: (props: any) => (
                    <VueWrapper component={component.default} {...props} />
                )
            })
        }
    )
})
{{/each}}

{{#each links}}
if (link{{this.name}}) {
    shareRouters.push(...link{{this.name}}.routers)
}
{{/each}}

{{#if frame}}
routers.push(...shareRouters)
{{/if}}

{{#if router.layout}}
const NotFound = React.lazy(() => import(/* webpackPrefetch: true */ '..{{router.notFound}}'))
{{/if}}
interface BootstrapProps {
    routers?: {
        path: string
        component: any
    }[]
}

function Bootstrap ({
    routers = []
}: BootstrapProps) {
    return (
        <Router
            basename="{{basename}}"
        >
            <Routes>
                <Route
                    path="/"
                    element={(
                        {{#if router.layout}}
                        <Layout />
                        {{else}}
                        <div >
                            <Outlet />
                        </div>
                        {{/if}}
                    )}
                >
                {{#each router.paths.react}}
                    <Route
                        {{#if index}}
                        index
                        {{else}}
                        path="{{relativePath}}"
                        {{/if}}
                        element={(
                            {{#if router.loading}}
                            <Suspense fallback={<RouterLoading />}>
                                <Route{{this.name}} />
                            </Suspense>
                            {{else}}
                            <Suspense fallback={<div />}>
                                <Route{{this.name}} />
                            </Suspense>
                            {{/if}}
                        )}
                    />
                {{/each}}
                    {routers.map(rt => {
                        const RouterComponent = rt.component
                        return (
                            <Route
                                path={rt.path}
                                key={rt.path}
                                element={(
                                    {{#if router.loading}}
                                    <Suspense fallback={<RouterLoading />}>
                                        <RouterComponent />
                                    </Suspense>
                                    {{else}}
                                    <Suspense fallback={<div />}>
                                        <RouterComponent />
                                    </Suspense>
                                    {{/if}}
                                )}
                            />
                        )
                    })}
                </Route>
                <Route
                    path="*"
                    element={(
                        {{#if router.loading}}
                        <Suspense fallback={<RouterLoading />}>
                            {{#if notFound}}
                            <NotFound />
                            {{else}}
                            <div />
                            {{/if}}
                        </Suspense>
                        {{else}}
                        <Suspense fallback={<div />}>
                            {{#if router.notFound}}
                            <NotFound />
                            {{else}}
                            <div />
                            {{/if}}
                        </Suspense>
                        {{/if}}
                    )}
                />
            </Routes>
        </Router>
    )
}

export default Bootstrap
export { shareRouters as bootstrapRouters} 

